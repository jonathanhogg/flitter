scopeName: 'source.flitter'
name: 'Flitter'
fileTypes: ['fl']

patterns: [
    {
        match: '--.*$'
        name: 'comment.single.flitter'
    }
    {
        match: '\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
        name: 'constant.numeric.flitter'
    }
    {
        match: ":([_a-zA-Z][_a-zA-Z0-9]*)\\b"
        name: "constant.symbol.flitter"
    }
    {
        match: "\\b(true|false)\\b"
        name: "constant.logical.flitter"
    }
    {
        match: "\\.\\.|\\|"
        name: "keyword.operator.range.flitter"
    }
    {
        match: "\\$"
        name: "keyword.operator.lookup.flitter"
    }
    {
        match: "\\^"
        name: "keyword.operator.insert.flitter"
    }
    {
        match: ";"
        name: "keyword.operator.sequence.flitter"
    }
    {
        match: "<\\=|>\\=|\\=\\=|<|>|!="
        name: "keyword.operator.comparison.flitter"
    }
    {
        match: "\\+|\\-|\\*|\\*\\*|/|//|%"
        name: "keyword.operator.arithmetic.flitter"
    }
    {
        begin: '\"'
        beginCaptures:
            '0':
                name: 'punctuation.definition.string.begin.flitter'
        end: '\"'
        endCaptures:
            '0':
                name: 'punctuation.definition.string.end.flitter'
        name: 'string.quoted.single.flitter'
        patterns: [
            {
                match: '\\"'
                name: 'constant.character.escape.flitter'
            }
        ]
    }
    {
        match: "\\b(pragma)\\s+([_a-zA-Z][_a-zA-Z0-9]*)"
        captures:
            '1':
                name: "keyword.control.flow.flitter"
            '2':
                name: "constant.pragma.flitter"
    }
    {
        match: "\\b(if|elif|else|for|in|let|where)\\b"
        name: "keyword.control.flow.flitter"
    }
    {
        match: "\\b(and|not|or|xor)\\b"
        name: "keyword.operator.logical.flitter"
    }
    {
        match: "!\\s*[_a-zA-Z][_a-zA-Z0-9]*"
        name: "keyword.operator.node.flitter"
    }
    {
        match: "{([^}]*)}"
        name: "keyword.operator.query.flitter"
    }
    {
        match: "\\#[_a-zA-Z][_a-zA-Z0-9]*"
        name: "constant.tag.flitter"
    }
    {
        match: "\\b([_a-zA-Z][_a-zA-Z0-9]*\\s*(?:;\\s*[_a-zA-Z][_a-zA-Z0-9]*)*)\\s*(=)(?=[^=])"
        captures:
            '1':
                patterns: [
                    {
                        match: "[_a-zA-Z][_a-zA-Z0-9]*"
                        name: "variable.name.flitter"
                    }
                    {
                        match: ";"
                        name: "keyword.operator.sequence.flitter"
                    }
                ]
            '2':
                name: "keyword.operator.assignment.flitter"
    }
    {
        match: "\\b(func)\\s+([_a-zA-Z][_a-zA-Z0-9]*)"
        captures:
            '1':
                name: "keyword.control.flow.flitter"
            '2':
                name: "variable.name.flitter"
    }
]
