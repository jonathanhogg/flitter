scopeName: 'source.flitter'
name: 'Flitter'
fileTypes: ['fl']

patterns: [
    {
        match: '\\A#!.*'
        name: 'comment.hashbang.flitter'
    }
    {
        match: '--.*$'
        name: 'comment.single.flitter'
    }
    {
        match: '\\b[-+]?([0-9][_0-9]*(\\.[0-9][_0-9]*)?|\\.[0-9][_0-9]*)(e[-+]?[0-9][_0-9]*)?\\b'
        name: 'constant.numeric.flitter'
    }
    {
        match: ":[_a-zA-Z][_a-zA-Z0-9]*\\b"
        name: "constant.symbol.flitter"
    }
    {
        match: "\\b(true|false)\\b"
        name: "constant.logical.flitter"
    }
    {
        match: "\\.\\.|\\|"
        name: "keyword.operator.range.flitter"
    }
    {
        match: "\\$"
        name: "keyword.operator.lookup.flitter"
    }
    {
        match: "\\^"
        name: "keyword.operator.insert.flitter"
    }
    {
        match: ";"
        name: "keyword.operator.sequence.flitter"
    }
    {
        match: "<\\=|>\\=|\\=\\=|<|>|!="
        name: "keyword.operator.comparison.flitter"
    }
    {
        match: "\\+|\\-|\\*|\\*\\*|/|//|%"
        name: "keyword.operator.arithmetic.flitter"
    }
    {
        begin: "(\"\"\")"
        beginCaptures:
            "1":
                name: "punctuation.definition.string.begin.flitter"
        end: "((?<=\"\"\")(\")\"\"|\"\"\")"
        endCaptures:
            "1":
                name: "punctuation.definition.string.end.flitter"
            "2":
                name: "meta.empty-string.double.flitter"
        name: "string.quoted.double.multi-line.flitter"
    }
    {
        begin: '(\")'
        beginCaptures:
            '1':
                name: 'punctuation.definition.string.begin.flitter'
        end: '((?<=\")(\")|\")'
        endCaptures:
            '1':
                name: "punctuation.definition.string.end.flitter"
            '2':
                name: "meta.empty-string.double.flitter"
        name: "string.quoted.double.single-line.flitter"
        patterns: [
            {
                match: '(\\\\")'
                name: 'constant.character.escape.flitter'
            }
        ]
    }
    {
        begin: "(\'\'\')"
        beginCaptures:
            "1":
                name: "punctuation.definition.string.begin.flitter"
        end: "((?<=\'\'\')(\')\'\'|\'\'\')"
        endCaptures:
            "1":
                name: "punctuation.definition.string.end.flitter"
            "2":
                name: "meta.empty-string.single.flitter"
        name: "string.quoted.single.multi-line.flitter"
    }
    {
        begin: "(\')"
        beginCaptures:
            '1':
                name: 'punctuation.definition.string.begin.flitter'
        end: "((?<=\')(\')|\')"
        endCaptures:
            '1':
                name: "punctuation.definition.string.end.flitter"
            '2':
                name: "meta.empty-string.single.flitter"
        name: "string.quoted.single.single-line.flitter"
        patterns: [
            {
                match: "\\\\'"
                name: 'constant.character.escape.flitter'
            }
        ]
    }
    {
        match: "\\b(pragma)\\s+([_a-zA-Z][_a-zA-Z0-9]*)"
        captures:
            '1':
                name: "keyword.control.flow.flitter"
            '2':
                name: "constant.pragma.flitter"
    }
    {
        match: "\\b(if|elif|else|let|where)\\b"
        name: "keyword.control.flow.flitter"
    }
    {
        match: "\\b(and|not|or|xor)\\b"
        name: "keyword.operator.logical.flitter"
    }
    {
        match: "!\\s*[_a-zA-Z][_a-zA-Z0-9]*"
        name: "keyword.operator.node.flitter"
    }
    {
        match: "@\\s*[_a-zA-Z][_a-zA-Z0-9]*"
        name: "keyword.operator.template.flitter"
    }
    {
        match: "{([^}]*)}"
        name: "keyword.operator.query.flitter"
    }
    {
        match: "\\#[_a-zA-Z][_a-zA-Z0-9]*"
        name: "constant.tag.flitter"
    }
    {
        match: "\\b([_a-zA-Z][_a-zA-Z0-9]*\\s*(?:;\\s*[_a-zA-Z][_a-zA-Z0-9]*)*)\\s*(=)(?=[^=])"
        captures:
            '1':
                patterns: [
                    {
                        match: "[_a-zA-Z][_a-zA-Z0-9]*"
                        name: "variable.name.flitter"
                    }
                    {
                        match: ";"
                        name: "keyword.operator.sequence.flitter"
                    }
                ]
            '2':
                name: "keyword.operator.assignment.flitter"
    }
    {
        match: "(for)\\s+([_a-zA-Z][_a-zA-Z0-9]*\\s*(?:;\\s*[_a-zA-Z][_a-zA-Z0-9]*)*)\\s+(in)"
        captures:
            '1':
                name: "keyword.control.flow.flitter"
            '2':
                patterns: [
                    {
                        match: "[_a-zA-Z][_a-zA-Z0-9]*"
                        name: "variable.name.flitter"
                    }
                    {
                        match: ";"
                        name: "keyword.operator.sequence.flitter"
                    }
                ]
            '3':
                name: "keyword.control.flow.flitter"
    }
    {
        match: "\\b(func)\\s+([_a-zA-Z][_a-zA-Z0-9]*)"
        captures:
            '1':
                name: "keyword.control.flow.flitter"
            '2':
                name: "variable.name.flitter"
    }
]
