
-- A demonstration of the difference between linear and non-linear sRGB color
-- `!canvas` nodes. `!shader`, `!canvas3d` and `!video` are *always* linear.
-- The default for `!canvas` is non-linear sRGB as this matches the common
-- standard in 2D drawing and image editing, and the perceptual model of
-- brightness.

-- Note that the black/yellow gradient will look more natural in non-linear
-- mode due to the perceptual model of brightness. However, the green/red
-- gradient will look worse as the middle yellow will appear too dark. This is
-- the main problem with working in non-linear space: mixing colors in a naive
-- way leads to poor results. You can get a slightly better result by sticking
-- a `!stop color=0.73;0.73;0` between the green and red stops in the gradient,
-- but it will still look like the yellow section is too narrow.

-- If you plan on using linear color in a `!canvas`, it will probably be
-- a good idea to switch the rendering path to `colorbits=16`, as non-linear
-- sRGB is designed to optimize the rendering of dark colours in 8-bit color
-- (human eyes are non-linear). Without increasing the color depth you are
-- likely to get visible banding in dark areas. Same goes, obviously, for
-- `!canvas3d`, which is always going to render better in 16-bit color. You
-- should be able to see this at the darker end of the bottom black/yellow
-- gradient. Add `colorbits=16` to the `!window` node and this should
-- disappear.

%pragma tempo 60

let COLORBARS="""
#version 330

in vec2 coord;
out vec4 fragment_color;

void main() {
    float c = coord.x;
    float cinv = 1 - c;
    float s = pow(c, 2.2);
    float sinv = pow(cinv, 2.2);
    if (coord.y < 0.25) {
        // (bottom quarter) 2.2 gamma yellow gradient:
        fragment_color = vec4(s, s, 0, 1);
    } else if (coord.y < 0.5) {
        // (lower middle) linear yellow gradient:
        fragment_color = vec4(c, c, 0, 1);
    } else if (coord.y < 0.75) {
        // (upper middle) 2.2 gamma green/red gradient
        fragment_color = vec4(s, sinv, 0, 1);
    } else {
        // (top quarter) a linear green/red gradient
        fragment_color = vec4(c, cinv, 0, 1);
    }
}
"""

let SIZE=1024;1024

!window size=SIZE
    -- This OpenGL implemented gradient will always be in linear color space:
    !shader fragment=COLORBARS
    -- The two overlay stripes in this canvas will render differently depending
    -- on the `linear` setting (which will swap every 2 seconds):
    let linear=beat//2%2
        text="Linear" if linear else "Non-linear"
    !canvas id=:lineartest antialias=false linear=linear stroke_width=2/max(SIZE)
        !group scale=SIZE
            !path
                !gradient start=0;0 end=1;0
                    !stop color=0;1;0
                    !stop color=1;0;0
                !rect point=0;1/6 size=1;1/6
                !fill
                !stroke color=0
            -- Do the yellow stripe as a series of rectangles to demonstrate that
            -- `color` operates the same outside of a `!gradient`:
            let n=16
            for i in ..n
                !rect point=i/n;4/6 size=1/n;1/6 color=i/n;i/n;0 fill=true
            !rect point=0;4/6 size=1;1/6 color=0 stroke=true
        !group color=0
            !text point=(1/2;3/12)*SIZE font_size=32 text=text
            !text point=(1/2;9/12)*SIZE font_size=32 text=text
    -- This canvas just copies the two stripes from the canvas above at half
    -- size into the centre. These small stripes should always match the larger
    -- ones, regardless of the setting of `linear` in this canvas (which will
    -- swap every second), because images are rendered to match the source not
    -- the destination:
    !canvas translate=SIZE/4 scale=1/2 linear=beat//1%2
        !image fill=SIZE texture_id=:lineartest
