
%pragma tempo 120


let LOGICAL=1920;1080 PHYSICAL=LOGICAL*2 ROWS=5 COLUMNS=8 box_size=LOGICAL/(COLUMNS;ROWS)

!window#top size=LOGICAL*2/3 screen=1 fullscreen=false vsync=true
    !canvas#main size=PHYSICAL scale=PHYSICAL/LOGICAL
        !group#background
            !path
                !gradient start=0;0 end=0;LOGICAL[1]
                    !stop color=0
                    !stop color=0;0;0.25
                !rect size=LOGICAL
                !fill
        !layer#boxes composite="add" size=LOGICAL
            for row in ..ROWS
                for column in ..COLUMNS
                    !group#box line_width=5 color=1 scale=1 \
                               _index=column;row _period=4 + 8*beta("period";row)[column] _phase=uniform("phase";row)[column] \
                               _cycle=beat/_period+_phase translate=box_size*(_index + 0.5)
                        !path
                            !rect point=-0.25*box_size size=0.5*box_size
                            !stroke
                        !path#ellipse
                            !gradient radius=0.2*box_size
                                !stop offset=0.5
                                !stop color=0;0;0;0
                            !ellipse radius=0.2*box_size
                            !fill


for row in ..ROWS
    for column in ..COLUMNS
        !pad number=column;7-row state="pad";column;row


{#box.} scale = 1 + 10 * $("pad";_index;"max_pressure") * $("pad";_index;"touched") * quad((beat - $("pad";_index;"touched";"beat")) * 2)


!pad number=0;0 name="Rainbow" color=1;1;0 toggle=true state="rainbow"

if $("rainbow";"touched") or $("rainbow";"toggled")
    !encoder number=0 name="Fader" color=1;1;0 state="rainbow_fader" initial=0.5

if $("rainbow";"toggled")
    let f = $("rainbow_fader")
    {#box.} color = color*(1-f) + map(quad(_cycle%1), hsv(hue[_cycle];1;f), hsv(hue[_cycle+1];1;f)) ; sine(_cycle) where hue=uniform("hue";_index)


!pad number=1;0 name="Bounce" color=0;1;0 toggle=true state="bounce"

if $("bounce";"touched") or $("bounce";"toggled")
    !encoder number=1 name="Bounce" color=0;1;0 state="bounce_amount" initial=0.5

if $("bounce";"toggled")
    {#box.} rotate = quad(_cycle % 1) / 2 \
            scale = scale * (0.5 + 4 * bounce(_cycle) * $("bounce_amount"))


!pad number=2;0 name="Glow" color=1;0.25;0 toggle=true state="glow"

if $("glow";"touched") or $("glow";"toggled")
    !encoder number=2 name="Glow" color=1;0.25;0 state="glow_amount" lower=0 upper=5 initial=1

if $("glow";"toggled")
    {#top.}
        !shader#main size=PHYSICAL fragment=read("../glsl/feedback.frag") glow=$("glow_amount") scale=1.1 mixing=0.2
            {#top. > *}


!pad number=3;0 name="Water" color=0;0.5;1 toggle=true state="water"

if $("water";"touched") or $("water";"toggled")
    !encoder number=3 name="Strength" color=0;0.5;1 state="water_strength"
    !encoder number=4 name="Depth" color=0;0.5;1 state="water_depth" lower=0 upper=500 initial=500

if $("water";"toggled")
    let border=1/6 scaling=1-border*2 oversize=PHYSICAL/scaling offset=border*oversize
    {#main} size=oversize
    {canvas#main} translate=offset
    {#top.}
        !shader#main fragment=read("../glsl/water.frag") size=oversize window=PHYSICAL \
                depth = $("water_depth") \
                strength = $("water_strength") \
                _period = 4 + 8 * beta("period")[..4] \
                _phase = uniform("phase")[..4] \
                _cycle = beat / _period + _phase \
                theta = uniform("theta";i)[_cycle[i]] for i in ..4 \
                sigma = 50 * beta("sigma";i)[_cycle[i]] * sine(_cycle[i]) for i in ..4 \
                lambda = 1500 + 1500 * beta("lambda";i)[_cycle[i]] for i in ..4 \
                phi = _cycle * 4
            {#top. > *}
