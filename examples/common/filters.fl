
-- Simple bloom filter consisting of a color adjustment, gaussian blur and then
-- a 'lighten' composite of the result with the original

func bloom_filter(nodes, radius=0, sigma=0.6, contrast=1, exposure=-1, blursize=null, colorbits=null, composite=null, id=null)
    !shader#lighten id=id colorbits=colorbits composite=:lighten
        if len(nodes) == 1
            nodes id=:bloom_source
        else
            !shader#compose id=:bloom_source composite=composite
                nodes
        !shader#blur passes=2 size=blursize radius=radius sigma=sigma fragment=read("../glsl/blur.frag")
            !shader#contrast contrast=contrast brightness=(1-contrast)/2 exposure=exposure fragment=read("../glsl/color_adjust.frag")
                !reference id=:bloom_source


-- Simple edge-detection filter that subtracts a gaussian blurred version of the
-- input from the input

func edge_detect(nodes, radius=0, sigma=0.6, blursize=null, colorbits=null, composite=null, id=null)
    !shader#difference id=id colorbits=colorbits composite=:difference
        if len(nodes) == 1
            nodes id=:edge_source
        else
            !shader#compose id=:edge_source composite=composite
                nodes
        !shader#blur passes=2 size=blursize radius=radius sigma=sigma fragment=read("../glsl/blur.frag")
            !reference id=:edge_source


-- Feedback filter that simulates old-school analogue feedback involving pointing
-- a camera at a telly and mixing this with an input signal. `mixer` and `decay`
-- work together so that after `decay` beats, `mixer` amount of the feedback signal
-- will be mixed in with the input signal. If only `mixer` is given then `decay`
-- defaults to 1 beat; if only `decay` is given then `mixer` defaults to 10%.
-- `glow` is an amount of overloading of the input signal into the mixer.
-- `translate`, `scale` and `rotate` transform the feedback signal, all in terms
-- of an amount of transformation per `decay` beats and canvas coordinate system.

func feedback_filter(nodes, mixer=0, timebase=1, glow=0, translate=0, scale=1, rotate=0, colorbits=null, composite=null, id=null)
    !shader#feedback id=id colorbits=colorbits fragment=read("../glsl/feedback.frag") \
                     mixer=mixer glow=glow timebase=timebase translate=translate scale=scale rotate=rotate
        if len(nodes) == 1
            nodes
        else
            !shader#compose composite=composite
                nodes
